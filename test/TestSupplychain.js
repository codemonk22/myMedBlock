// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const originFactoryName = "John Doe"
    const originFactoryInformation = "Yarray Valley"
    const originFactoryLatitude = "-38.239770"
    const originFactoryLongitude = "144.341490"
    var medicineID = sku + upc
    const medicineNotes = "Best beans for Espresso"
    const medicinePrice = web3.utils.toWei("1", "ether")
    var medicineState = 0
    const distributorID = accounts[2]
    const pharmacistID = accounts[3]
    const patientID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Pharmacist: accounts[3] ", accounts[3])
    console.log("Patient: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function makeMedicine() that allows a manufacturer to make medicine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Made()
        supplyChain.Made((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Made by calling function makeMedicine()
        await supplyChain.makeMedicine(upc, originManufacturerID, originFactoryName, originFactoryInformation, originFactoryLatitude, originFactoryLongitude, medicineNotes)

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferOne = await supplyChain.fetchMedicineBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        const resultBufferThree = await supplyChain.fetchMedicineBufferThree.call(upc)
        // Verify the result set
        // console.log(resultBufferOne);
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid medicine SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid medicine UPC')
        assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferTwo[0], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function packMedicine() that allows a manufacturer to pack medicine", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        supplyChain.Packed((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Packed by calling function PackMedicine()
        await supplyChain.packMedicine(upc)

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 1, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    
    // 4th Test
    it("Testing smart contract function sellMedicine() that allows a manufacturer to sell medicine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        supplyChain.ForSale((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as ForSale by calling function sellMedicine()
        await supplyChain.sellMedicine(upc,web3.utils.toWei("1", "ether"))

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 2, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    

    // 5th Test
    it("Testing smart contract function buyMedicine() that allows a distributor to buy medicine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        supplyChain.Sold((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Sold by calling function buyMedicine()
        await supplyChain.buyMedicine(upc,{value: web3.utils.toWei('1', 'ether') })

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 3, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    
        


    // 6th Test
    it("Testing smart contract function shipMedicine() that allows a distributor to ship medicine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        assert.equal(1, 1, )

        // Watch the emitted event Packed()
        supplyChain.Shipped((err, res) => {
            eventEmitted = true;
        })
        await supplyChain.addManufacturer(originManufacturerID)


        // Mark an medicine as Shipped by calling function shipMedicine()
        await supplyChain.shipMedicine(upc,{from: originManufacturerID})
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 4, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    

  

    // 7th Test
    it("Testing smart contract function receiveMedicine() that allows a pharmacist to mark medicine received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        var eventEmitted = false
        
        // Watch the emitted event Received()
        supplyChain.Received((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Reiceived by calling function receiveMedicine()
        await supplyChain.receiveMedicine(upc)

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 5, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       

    })    

    // 8th Test
    it("Testing smart contract function purchaseMedicine() that allows a patient to purchase medicine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        supplyChain.Purchased((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Purchased by calling function purchaseMedicine()
        await supplyChain.purchaseMedicine(upc)

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[3], 6, 'Error: Invalid medicine State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    
        
    })    


// Deleted as I have already tested them in the first case
    // 9th Test
    it("Testing smart contract function fetchMedicineBufferOne() that allows anyone to fetch medicine details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchMedicineBufferTwo() that allows anyone to fetch medicine details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        
        
        // Verify the result set:
        
    })

});

